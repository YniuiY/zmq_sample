// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Person.proto

#ifndef PROTOBUF_Person_2eproto__INCLUDED
#define PROTOBUF_Person_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_Person_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsphone_numberImpl();
void InitDefaultsphone_number();
void InitDefaultspersonImpl();
void InitDefaultsperson();
inline void InitDefaults() {
  InitDefaultsphone_number();
  InitDefaultsperson();
}
}  // namespace protobuf_Person_2eproto
namespace Person {
class person;
class personDefaultTypeInternal;
extern personDefaultTypeInternal _person_default_instance_;
class phone_number;
class phone_numberDefaultTypeInternal;
extern phone_numberDefaultTypeInternal _phone_number_default_instance_;
}  // namespace Person
namespace Person {

enum PhoneType {
  MOBILE = 0,
  HOME = 1,
  WORK = 2,
  PhoneType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PhoneType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PhoneType_IsValid(int value);
const PhoneType PhoneType_MIN = MOBILE;
const PhoneType PhoneType_MAX = WORK;
const int PhoneType_ARRAYSIZE = PhoneType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PhoneType_descriptor();
inline const ::std::string& PhoneType_Name(PhoneType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PhoneType_descriptor(), value);
}
inline bool PhoneType_Parse(
    const ::std::string& name, PhoneType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PhoneType>(
    PhoneType_descriptor(), name, value);
}
// ===================================================================

class phone_number : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Person.phone_number) */ {
 public:
  phone_number();
  virtual ~phone_number();

  phone_number(const phone_number& from);

  inline phone_number& operator=(const phone_number& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  phone_number(phone_number&& from) noexcept
    : phone_number() {
    *this = ::std::move(from);
  }

  inline phone_number& operator=(phone_number&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const phone_number& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const phone_number* internal_default_instance() {
    return reinterpret_cast<const phone_number*>(
               &_phone_number_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(phone_number* other);
  friend void swap(phone_number& a, phone_number& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline phone_number* New() const PROTOBUF_FINAL { return New(NULL); }

  phone_number* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const phone_number& from);
  void MergeFrom(const phone_number& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(phone_number* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string number = 1;
  void clear_number();
  static const int kNumberFieldNumber = 1;
  const ::std::string& number() const;
  void set_number(const ::std::string& value);
  #if LANG_CXX11
  void set_number(::std::string&& value);
  #endif
  void set_number(const char* value);
  void set_number(const char* value, size_t size);
  ::std::string* mutable_number();
  ::std::string* release_number();
  void set_allocated_number(::std::string* number);

  // .Person.PhoneType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::Person::PhoneType type() const;
  void set_type(::Person::PhoneType value);

  // @@protoc_insertion_point(class_scope:Person.phone_number)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr number_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_Person_2eproto::TableStruct;
  friend void ::protobuf_Person_2eproto::InitDefaultsphone_numberImpl();
};
// -------------------------------------------------------------------

class person : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Person.person) */ {
 public:
  person();
  virtual ~person();

  person(const person& from);

  inline person& operator=(const person& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  person(person&& from) noexcept
    : person() {
    *this = ::std::move(from);
  }

  inline person& operator=(person&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const person& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const person* internal_default_instance() {
    return reinterpret_cast<const person*>(
               &_person_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(person* other);
  friend void swap(person& a, person& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline person* New() const PROTOBUF_FINAL { return New(NULL); }

  person* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const person& from);
  void MergeFrom(const person& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(person* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string email = 3;
  void clear_email();
  static const int kEmailFieldNumber = 3;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // .Person.phone_number phones = 4;
  bool has_phones() const;
  void clear_phones();
  static const int kPhonesFieldNumber = 4;
  const ::Person::phone_number& phones() const;
  ::Person::phone_number* release_phones();
  ::Person::phone_number* mutable_phones();
  void set_allocated_phones(::Person::phone_number* phones);

  // int32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Person.person)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::Person::phone_number* phones_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend struct ::protobuf_Person_2eproto::TableStruct;
  friend void ::protobuf_Person_2eproto::InitDefaultspersonImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// phone_number

// string number = 1;
inline void phone_number::clear_number() {
  number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& phone_number::number() const {
  // @@protoc_insertion_point(field_get:Person.phone_number.number)
  return number_.GetNoArena();
}
inline void phone_number::set_number(const ::std::string& value) {
  
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Person.phone_number.number)
}
#if LANG_CXX11
inline void phone_number::set_number(::std::string&& value) {
  
  number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Person.phone_number.number)
}
#endif
inline void phone_number::set_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Person.phone_number.number)
}
inline void phone_number::set_number(const char* value, size_t size) {
  
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Person.phone_number.number)
}
inline ::std::string* phone_number::mutable_number() {
  
  // @@protoc_insertion_point(field_mutable:Person.phone_number.number)
  return number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* phone_number::release_number() {
  // @@protoc_insertion_point(field_release:Person.phone_number.number)
  
  return number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void phone_number::set_allocated_number(::std::string* number) {
  if (number != NULL) {
    
  } else {
    
  }
  number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), number);
  // @@protoc_insertion_point(field_set_allocated:Person.phone_number.number)
}

// .Person.PhoneType type = 2;
inline void phone_number::clear_type() {
  type_ = 0;
}
inline ::Person::PhoneType phone_number::type() const {
  // @@protoc_insertion_point(field_get:Person.phone_number.type)
  return static_cast< ::Person::PhoneType >(type_);
}
inline void phone_number::set_type(::Person::PhoneType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Person.phone_number.type)
}

// -------------------------------------------------------------------

// person

// string name = 1;
inline void person::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& person::name() const {
  // @@protoc_insertion_point(field_get:Person.person.name)
  return name_.GetNoArena();
}
inline void person::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Person.person.name)
}
#if LANG_CXX11
inline void person::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Person.person.name)
}
#endif
inline void person::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Person.person.name)
}
inline void person::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Person.person.name)
}
inline ::std::string* person::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Person.person.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* person::release_name() {
  // @@protoc_insertion_point(field_release:Person.person.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void person::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Person.person.name)
}

// int32 id = 2;
inline void person::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 person::id() const {
  // @@protoc_insertion_point(field_get:Person.person.id)
  return id_;
}
inline void person::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Person.person.id)
}

// string email = 3;
inline void person::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& person::email() const {
  // @@protoc_insertion_point(field_get:Person.person.email)
  return email_.GetNoArena();
}
inline void person::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Person.person.email)
}
#if LANG_CXX11
inline void person::set_email(::std::string&& value) {
  
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Person.person.email)
}
#endif
inline void person::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Person.person.email)
}
inline void person::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Person.person.email)
}
inline ::std::string* person::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:Person.person.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* person::release_email() {
  // @@protoc_insertion_point(field_release:Person.person.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void person::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:Person.person.email)
}

// .Person.phone_number phones = 4;
inline bool person::has_phones() const {
  return this != internal_default_instance() && phones_ != NULL;
}
inline void person::clear_phones() {
  if (GetArenaNoVirtual() == NULL && phones_ != NULL) {
    delete phones_;
  }
  phones_ = NULL;
}
inline const ::Person::phone_number& person::phones() const {
  const ::Person::phone_number* p = phones_;
  // @@protoc_insertion_point(field_get:Person.person.phones)
  return p != NULL ? *p : *reinterpret_cast<const ::Person::phone_number*>(
      &::Person::_phone_number_default_instance_);
}
inline ::Person::phone_number* person::release_phones() {
  // @@protoc_insertion_point(field_release:Person.person.phones)
  
  ::Person::phone_number* temp = phones_;
  phones_ = NULL;
  return temp;
}
inline ::Person::phone_number* person::mutable_phones() {
  
  if (phones_ == NULL) {
    phones_ = new ::Person::phone_number;
  }
  // @@protoc_insertion_point(field_mutable:Person.person.phones)
  return phones_;
}
inline void person::set_allocated_phones(::Person::phone_number* phones) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete phones_;
  }
  if (phones) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      phones = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, phones, submessage_arena);
    }
    
  } else {
    
  }
  phones_ = phones;
  // @@protoc_insertion_point(field_set_allocated:Person.person.phones)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Person

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Person::PhoneType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Person::PhoneType>() {
  return ::Person::PhoneType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Person_2eproto__INCLUDED
